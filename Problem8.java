/**
 * Project Euler Problem 8 - 10001st Prime:
 * The four adjacent digits in the 1000-digit number that have the
 * greatest product are 9 × 9 × 8 × 9 = 5832.
 * 
 * 73167176531330624919225119674426574742355349194934
 * 96983520312774506326239578318016984801869478851843
 * 85861560789112949495459501737958331952853208805511
 * 12540698747158523863050715693290963295227443043557
 * 66896648950445244523161731856403098711121722383113
 * 62229893423380308135336276614282806444486645238749
 * 30358907296290491560440772390713810515859307960866
 * 70172427121883998797908792274921901699720888093776
 * 65727333001053367881220235421809751254540594752243
 * 52584907711670556013604839586446706324415722155397
 * 53697817977846174064955149290862569321978468622482
 * 83972241375657056057490261407972968652414535100474
 * 82166370484403199890008895243450658541227588666881
 * 16427171479924442928230863465674813919123162824586
 * 17866458359124566529476545682848912883142607690042
 * 24219022671055626321111109370544217506941658960408
 * 07198403850962455444362981230987879927244284909188
 * 84580156166097919133875499200524063689912560717606
 * 05886116467109405077541002256983155200055935729725
 * 71636269561882670428252483600823257530420752963450
 *
 * Find the thirteen adjacent digits in the 1000-digit number that have the
 * greatest product. What is the value of this product?
 *
 * @author  Nathan Tsai
 * @version 1.0, 2 Jan 2018
 * @since   1 Jan 2018
 */
// Import the necessary package.
import java.lang.Integer;

public class Problem8 {

  /**
   * Runs the program and prints the solution of the problem to System.out.
   *
   * @param args the input taken in from the command line during runtime
   */
  public static void main(String[] args) {
    String number = "";
    number += "73167176531330624919225119674426574742355349194934";
    number += "96983520312774506326239578318016984801869478851843";
    number += "85861560789112949495459501737958331952853208805511";
    number += "12540698747158523863050715693290963295227443043557";
    number += "66896648950445244523161731856403098711121722383113";
    number += "62229893423380308135336276614282806444486645238749";
    number += "30358907296290491560440772390713810515859307960866";
    number += "70172427121883998797908792274921901699720888093776";
    number += "65727333001053367881220235421809751254540594752243";
    number += "52584907711670556013604839586446706324415722155397";
    number += "53697817977846174064955149290862569321978468622482";
    number += "83972241375657056057490261407972968652414535100474";
    number += "82166370484403199890008895243450658541227588666881";
    number += "16427171479924442928230863465674813919123162824586";
    number += "17866458359124566529476545682848912883142607690042";
    number += "24219022671055626321111109370544217506941658960408";
    number += "07198403850962455444362981230987879927244284909188";
    number += "84580156166097919133875499200524063689912560717606";
    number += "05886116467109405077541002256983155200055935729725";
    number += "71636269561882670428252483600823257530420752963450";

    System.out.println("The greatest product of thirteen adjacent digits in" +
    " the 1000-digit number is: " + maxAdjProduct(number, 13));
  }

  /**
   * Returns the maximum adjacent product of adjDigits numbers by iterating
   * through the number and multiplying the possible products out.
   *
   * @param number    the number to check for the maximum adjacent product
   * @param adjDigits the number of adjacent digits to multiply
   * @return          the maximum adjacent product
   */
  public static long maxAdjProduct(String number, int adjDigits) {

    // Initialize max product to return.
    long maxProduct = 0;

    // Iterate through possible indicies that do not go past the number length.
    for (int i = 0; i <= number.length() - adjDigits; i++) {

        // Initialize the product.
        long currentProduct = 1;

        // Multiply the adjacent numbers.
        for (int j = i; j < i + adjDigits; j++) {
          currentProduct *= Integer.parseInt(number.substring(j, j + 1));
        }

        // Update max product if current product is larger.
        if (currentProduct > maxProduct) {
          maxProduct = currentProduct;
        }
    }
    return maxProduct;
  }
}
