/*
 * @author Nathan Tsai
 * @version 2/20/2017
 * 
 * Project Euler Problem 2 - Even Fibonacci Numbers:
 * Each new term in the Fibonacci sequence is 
 * generated by adding the previous two terms. 
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence
 * whose values do not exceed four million, 
 * find the sum of the even-valued terms.
 */

public class problem2 {

  public static void main(String[] args) {
    
    // prints out the sum of the even Fibonacci numbers less than 4,000,000
    System.out.println(evenFibSum(4000000));
  }
  
  public static long fibonacci(int n) {
    
    // base cases for Fibonacci sequence
    if (n == 0) {
      return 0;
    }
    else if (n == 1) {
      return 1;
    }

    // Fibonacci sequence using recursion
    else {
      return fibonacci(n - 1) + fibonacci(n - 2);
    }
  }

  public static int evenFibSum(int limit) {
    
    // starts sum at 2 to skip the first 2 terms (0 and 1) and start at 1
    int n = 2;

    // initializes sum
    int sum = 0; 

    // adds even Fibonacci numbers under limit
    while (fibonacci(n) <= limit) {
      if (fibonacci(n) % 2 == 0) {
        // System.out.println(fibonacci(n));
        sum += fibonacci(n);
      }
      n++;
    }

    // returns final sum
    return sum;
  }

}